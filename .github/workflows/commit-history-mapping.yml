name: Extract Authors and Rewrite Commit History
run-name: Commit-history-mapping - ${{github.event.client_payload.repo_name}}
on:
  repository_dispatch:
    types: [Commit-history-mapping]

permissions:
  contents: write
  actions: write

jobs:
  extract-authors:
    runs-on: ubuntu-latest

    steps:
      - name: Read Input Variables
        run: |
          echo "Repository Name: ${{ github.event.client_payload.repo_name }}"
          echo "Repository Org: ${{ github.event.client_payload.repo_org }}"
          echo "Target Org: ${{ github.event.client_payload.target_org }}"
        env:
          REPO_NAME: ${{ github.event.client_payload.repo_name }}
          REPO_ORG: ${{ github.event.client_payload.repo_org }}
          TARGET_ORG: ${{ github.event.client_payload.target_org }}
      
      # - name: Checkout Repository
      #   uses: actions/checkout@v4
      #   with:
      #     token: ${{ secrets.TARGET_ADMIN_TOKEN }}
      #     repository: ${{ github.event.client_payload.target_org }}/${{ github.event.client_payload.repo_name }}
      #     fetch-depth: 0 
      #     path: target-repo
      #     sparse-checkout-cone-mode: false
      
      # - name: Debug Workspace Contents
      #   run: |
      #     echo "Listing workspace contents:"
      #     ls -la
      #     echo "Listing target-repo directory contents:"
      #     ls -la target-repo
      
      # - name: Verify target-repo Directory
      #   run: |
      #     if [ ! -d "target-repo" ]; then
      #       echo "Error: target-repo directory not found!"
      #       exit 1
      #     fi
      
      # - name: Fetch All Branches
      #   run: |
      #     cd target-repo
      #     git fetch --all --prune
      
      # - name: List All Branches
      #   run: |
      #     cd target-repo
      #     git branch -r | grep -v '\->' | awk -F'/' '{print $2}' | sort | uniq > branches.txt
      #     cat branches.txt
 
      # - name: Download authors.xlsx
      #   run: |
      #     curl -H "Authorization: token ${{ secrets.SOURCE_ADMIN_TOKEN }}" \
      #      -L -o authors.xlsx \
      #       https://raw.githubusercontent.com/MGMResorts/mgm-af-migrations-via-actions/main/authors.xlsx
      #     ls -l authors.xlsx
      #     file authors.xlsx 

      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.x'

      # - name: Install Required Dependencies
      #   run: pip install git-filter-repo pandas openpyxl

      # - name: Print Authors Before Rewrite
      #   run: |
      #     echo "Authors Before Rewrite:"
      #     git -C target-repo log --all --pretty="%an <%ae>" | sort | uniq

      # - name: Fetch Unique Authors
      #   run: |
      #     git -C target-repo log --all --pretty="%an <%ae>" | sort | uniq > target-repo/authors.txt
      
      # - name: Process Excel and Generate Mailmap
      #   run: |
      #     python3 - <<EOF
      #     import pandas as pd
      
      #     # Load Excel file
      #     excel_file = "authors.xlsx"
      #     df = pd.read_excel(excel_file)
      
      #     # Read extracted authors
      #     with open("target-repo/authors.txt", "r") as f:
      #         extracted_authors = f.read().splitlines()
      
      #     # Prepare mappings
      #     mailmap = ""
      #     for index, row in df.iterrows():
      #         login = str(row['login']).strip() if pd.notna(row['login']) else ""
      #         name = str(row['name']).strip() if pd.notna(row['name']) else ""
      #         email = str(row['saml_name_id']).strip() if pd.notna(row['saml_name_id']) else ""
      
      #         if email:
      #             new_name = email.split('@')[0]
      #             new_email = email
      
      #             for author in extracted_authors:
      #                 git_name, git_email = author.rsplit(" <", 1)
      #                 git_email = git_email.rstrip(">")
      
      #                 if login and (login in git_name or login in git_email):
      #                     mailmap += f"{new_name} <{new_email}> {git_name} <{git_email}>\n"
      #                 elif name and (name in git_name or name in git_email):
      #                     mailmap += f"{new_name} <{new_email}> {git_name} <{git_email}>\n"
      
      #     # Write mailmap file to workspace root
      #     with open("mailmap.txt", "w") as f:
      #         f.write(mailmap)
      
      #     print("Generated Mailmap File:")
      #     print(mailmap)
      #     EOF

      # # - name: Display Generated Mailmap
      # #   run: cat target-repo/mailmap.txt

      # # - name: Debug Mailmap File
      # #   run: |
      # #     echo "Checking mailmap.txt in workspace:"
      # #     ls -la
      # #     cat mailmap.txt
      
      # - name: Process Each Branch
      #   run: |
      #     while IFS= read -r branch; do
      #       echo "Processing branch: $branch"
            
      #       if ! git -C target-repo checkout $branch; then
      #         echo "Error: Branch $branch could not be checked out. Skipping..."
      #         continue
      #       fi
            
      #       if [ -f "mailmap.txt" ]; then
      #         git -C target-repo filter-repo --mailmap $(pwd)/mailmap.txt --force
      #       else
      #         echo "Error: mailmap.txt not found! Skipping branch $branch."
      #         continue
      #       fi
      
      #       git -C target-repo remote add origin https://github.com/${{ github.event.client_payload.target_org }}/${{ github.event.client_payload.repo_name }}.git
            
      #       # Attempt to push changes and skip if the branch is protected
      #       if ! git -C target-repo push origin $branch --force; then
      #         echo "Warning: Could not push changes to branch $branch (likely due to protection policies). Skipping..."
      #         continue
      #       fi
      #     done < target-repo/branches.txt

      
      # - name: Print Authors After Rewrite
      #   run: |
      #     echo "Authors After Rewrite:"
      #     git -C target-repo log --all --pretty="%an <%ae>" | sort | uniq

      
