name: Shared GitHub Enterprise Cloud GEI Migration

on:
  workflow_call:
    inputs:
      locksourcerepo:
        description: "Lock Source Repository after migration"
        required: true
        type: string
      AZURE_DEVOPS_ORG:
        description: "Azure DevOps Organization"
        required: true
        type: string
      AZURE_DEVOPS_PROJECT:
        description: "Azure DevOps Project"
        required: true
        type: string
      ADO2GHA_DOWNLOAD_BRANCH:
        description: "ADO2GHA migrated workflow will be downloaded into this branch"
        required: true
        type: string
        
    secrets:
      TARGET_ADMIN_TOKEN:
        required: true
      SOURCE_ADMIN_TOKEN:
        required: true
      AZURE_STORAGE_CONNECTION_STRING:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

permissions:
  contents: read
  issues: write

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      repositories: ${{ steps.json.outputs.repositories }}
      migration-type: ${{ steps.migration-type.outputs.result }}
      locksourcerepo: ${{ steps.json.outputs.lock_source_repository }}    
      AZURE_DEVOPS_ORG: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).azure_devops_organization }}
      AZURE_DEVOPS_PROJECT: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).azure_devops_project }}
      ADO2GHA_DOWNLOAD_BRANCH: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).ado2gha_download_branch }}
      parsed-issue: ${{ steps.parse-issue-body.outputs.jsonString }}
      PIPELINE_ACTION: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).pipeline_action }}
      BUILD_PIPELINE_ID: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).build_pipeline_id }}
      RELEASE_PIPELINE_ID: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).release_pipeline_id }}

    if: github.event_name == 'issue_comment' &&
      (contains(github.event.comment.body, '/run-dry-run-migration') ||
      contains(github.event.comment.body, '/run-production-migration'))
    steps:         
      - name: Check out scripts
        uses: actions/checkout@v3

      - name: Parse issue body
        id: parse-issue-body
        uses: stefanbuck/github-issue-parser@v3

      - run: echo $JSON_STRING
        env:
          JSON_STRING: ${{ steps.parse-issue-body.outputs.jsonString }}

      - name: Debug Parsed Values
        run: |
          echo "Parsed Azure DevOps Org: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).azure_devops_organization }}"
          echo "Parsed Azure DevOps Project: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).azure_devops_project }}"
          echo "Parsed ado2gha download branch: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).ado2gha_download_branch }}"
  
      # - name: Set Outputs
      #   id: set-azure-outputs
      #   run: |
      #     echo "AZURE_DEVOPS_ORG=${{ fromJson(steps.parse-issue-body.outputs.jsonString).azure_devops_organization }}" >> $GITHUB_OUTPUT
      #     echo "AZURE_DEVOPS_PROJECT=${{ fromJson(steps.parse-issue-body.outputs.jsonString).azure_devops_project }}" >> $GITHUB_OUTPUT
          
      - name: Set migration type
        uses: actions/github-script@v6
        id: migration-type
        with:
          result-encoding: string
          script: |
            return context.payload.comment.body.match('dry-run') ? 'Dry-run' : 'Production'

      - name: Set Lock Source Repo
        uses: actions/github-script@v6
        id: locksourcerepo
        with:
          result-encoding: string
          script: |
            return context.payload.comment.body.match('Yes') ? 'Yes' : 'No'

      - name: Add migration comment
        uses: actions/github-script@v6
        with:
          script: |
            const body = `:hourglass: **${{ steps.migration-type.outputs.result }} migration in progress.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Build matrix
        uses: actions/github-script@v6
        id: json
        with:
          script: |
            let repositories = process.env.REPOSITORIES.replace(/\r/g, '').split('\n');
            let json = JSON.stringify(repositories);
            console.log(json);
            core.setOutput('repositories', json);
        env:
          REPOSITORIES: ${{ steps.parse-issue-body.outputs.issueparser_repositories }}

  migrate:
    name: GEI
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix: 
        repository: ${{ fromJson(needs.prepare.outputs.repositories) }}
      fail-fast: false
      max-parallel: 15

    # Maximize the timeout to 50,400 minutes (35 days) from the default
    # limit of 360 minutes (6 hours), as migrations can take some time.
    timeout-minutes: 50400
    
    env:
      # switch to 'false' if you don't want to run the apt-get commands and GEI
      INSTALL_PREREQS: 'true'

    outputs:
      repo_name: ${{ steps.save-repo-details.outputs.repo_name }}
      repo_org: ${{ steps.save-repo-details.outputs.repo_org }}
      target_org: ${{ steps.save-repo-details.outputs.target_org }}

    steps:
      - name: Check Lock Source Repository Value
        if: fromJson(needs.prepare.outputs.parsed-issue).lock_source_repository == 'Yes'
        run: |
            echo "Locking the source repository after migration."
      
      - name: Check out scripts
        uses: actions/checkout@v3

      - name: Install common dependencies
        if: ${{ env.INSTALL_PREREQS == 'true' }}
        run: |
          sudo apt-get update
          sudo apt-get install --yes git unzip curl wget apt-transport-https software-properties-common

      - name: Install GitHub Enterprise Importer
        if: ${{ env.INSTALL_PREREQS == 'true' }}
        run: |
          if [ -z "$(command -v gei)" ]
          then
            wget https://github.com/github/gh-gei/releases/latest/download/gei-linux-amd64
            sudo install --owner root --group root --mode 755 gei-linux-amd64 /usr/local/bin/gei
          fi

      - if: runner.debug
        name: GEI version number
        run: gei --version

      - name: Install PowerShell
        if: ${{ env.INSTALL_PREREQS == 'true' }}
        run: |
          if [ -z "$(command -v pwsh)" ]
          then
            wget "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
            sudo dpkg --install packages-microsoft-prod.deb
            sudo apt-get update
            sudo apt-get install --yes powershell
          fi

      - if: runner.debug
        name: PowerShell version number
        run: pwsh --version

      - name: Create lock flag based on migration type
        uses: actions/github-script@v6
        id: lock-flag
        with:
          result-encoding: string

          script: |
            console.log(`Lock repository setting: ${{ fromJson(needs.prepare.outputs.parsed-issue).lock_source_repository }}`);
            return '${{ needs.prepare.outputs.migration-type }}' === 'Production' && '${{ fromJson(needs.prepare.outputs.parsed-issue).lock_source_repository }}' == 'Yes' ? '--lock-source-repo' : ''

      - name: Lock repository if needed
        id: lock-repo
        run: |
          set -e  # Exit immediately on any error
      
          org='${{ github.REPOSITORY_OWNER }}'
          repo=$(basename ${{ matrix.repository }})
          migration_type="${{ needs.prepare.outputs.migration-type }}"
      
          echo "Organization => $org"
          echo "Repository => $repo"
          echo "Migration Type => $migration_type"
      
          if [[ "$migration_type" == "Production" ]]; then
            echo "Initiating repository lock..."
            
            response=$(gh api -X POST "/orgs/$org/migrations" \
              -f repositories[]="$org/$repo" \
              -F lock_repositories=true \
              -f "exclude[]=repositories" \
              --jq '{id: .id, state: .state, updated_at: .updated_at}')
      
            if [[ $? -ne 0 ]]; then
              echo "❌ Failed to lock the repository!"
              exit 1
            fi
      
            echo "✅ Repository lock successful: $response"
            echo "migration_status=locked" >> $GITHUB_ENV
            echo "lock_response=$response" >> $GITHUB_OUTPUT
            
            echo "🚀 Exiting workflow as migration type is Production."
            # exit 1
          else
            echo "⚠️ Skipping repository lock (Not a Production migration)"
            echo "migration_status=skipped" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.SOURCE_ADMIN_TOKEN }}

      - name: Add Production migration comment
        if: needs.prepare.outputs.migration-type == 'Production'
        uses: actions/github-script@v6
        with:
          script: |
            const lockResponse = `${{ steps.lock-repo.outputs.lock_response }}`;
            const commentBody = `:lock: **Production migration in progress. Repository is locked.**\n\n**Lock Response:**\n\`${lockResponse}\`\n\n[View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`;

      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
        
      - name: Exit Gracefully
        if: needs.prepare.outputs.migration-type == 'Production'
        run: |
          echo "🚀 Exiting workflow after locking the repository."
          exit 1  # Success exit
            
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: |
          npm i octokit@2.1.0 fs

      - name: Get source repos visibility and write to file
        if: fromJson(needs.prepare.outputs.parsed-issue).target_repository_visibility == 'Mirror'
        uses: actions/github-script@v6
        id: source-repos-visibility
        with:
          script: |
            const repositories = process.env.REPOSITORIES;
            await require('./.github/scripts/get-source-repos-visibility.js') ({repositories});
        env:
          SOURCE_ADMIN_TOKEN: ${{ secrets.SOURCE_ADMIN_TOKEN }}
          REPOSITORIES: ${{ matrix.repository }}
          SOURCE_HOST: ${{ vars.SOURCE_HOST }}
          
      - name: Upload repos visibility file to artifacts
        if: fromJson(needs.prepare.outputs.parsed-issue).target_repository_visibility == 'Mirror'
        uses: actions/upload-artifact@v4
        with:
          name: source-repos-visibility.json
          path: ./source-repos-visibility.json
          if-no-files-found: error
          retention-days: 30
  
      - name: Migrate repositories
        shell: pwsh
        id: migrate
        run: |
          function Exec {
            param (
              [scriptblock]$ScriptBlock
            )
            & @ScriptBlock
            if ($lastexitcode -ne 0) {
              exit $lastexitcode
            }
          }

          function ExecAndGetMigrationID {
            param (
              [scriptblock]$ScriptBlock
            )
            $MigrationID = Exec $ScriptBlock | ForEach-Object {
              Write-Host $_
              $_
            } | Select-String -Pattern "\(ID: (.+)\)" | ForEach-Object { $_.matches.groups[1] }
            return $MigrationID
          }

          if ($Env:VISIBILITY -eq 'None' -or $Env:VISIBILITY -eq 'Mirror') {
            $VisibilityValue = 'private'
          } else {
            $VisibilityValue = $Env:VISIBILITY.ToLower()
          }

          $RepoMigrations = [ordered]@{}
          $RepoSources = $Env:REPOSITORIES.Split("`n")

          if ('${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}' -ne '') {
            $AzureStorageIncludeArg = "--azure-storage-connection-string"
            $AzureStorageIncludeValue = "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"
          }

          if ('${{ secrets.AWS_ACCESS_KEY_ID }}' -ne '') {
            $AwsAccessKeyIdArg = "--aws-access-key"
            $AwsAccessKeyIdValue = "${{ secrets.AWS_ACCESS_KEY_ID }}"
            $AwsSecretAccessKeyArg = "--aws-secret-key"
            $AwsSecretAccessKeyValue = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            $AwsRegionArg = "--aws-region"
            $AwsRegionValue = "${{ vars.AWS_REGION }}"
            $AwsBucketArg = "--aws-bucket-name"
            $AwsBucketValue = "${{ vars.AWS_BUCKET_NAME }}"
          }

          foreach ($Repo in $RepoSources) {
            $Repo = $Repo.Trim()
            Write-Host "Repo: $Repo"

            $Parts = $Repo.Split("/")
            $RepoName = $Parts[$Parts.length - 1]
            $RepoOrg = $Parts[$Parts.length -2]
            $RepoHost = $Parts[2]

            if ($RepoHost -ne 'github.com') {
              $ServerIncludeArg = "--ghes-api-url" 
              $ServerIncludeValue = "https://$($RepoHost)/api/v3"
            }

            $MigrationID = ExecAndGetMigrationID {
              gei migrate-repo                                                                     `
              --source-repo $RepoName                                                              `
              --target-repo $RepoName                                                              `
              --github-source-org $RepoOrg                                                         `
              --github-target-org '${{ fromJson(needs.prepare.outputs.parsed-issue).target_organization }}'                              `
              --target-repo-visibility $VisibilityValue                                            `
              $AzureStorageIncludeArg $AzureStorageIncludeValue                                    `
              $ServerIncludeArg $ServerIncludeValue                                                `
              $AwsAccessKeyIdArg $AwsAccessKeyIdValue                                              `
              $AwsSecretAccessKeyArg $AwsSecretAccessKeyValue                                      `
              $AwsRegionArg $AwsRegionValue                                                        `
              $AwsBucketArg $AwsBucketValue                                                        `
              ${{ steps.lock-flag.outputs.result }} `
              --queue-only
            }
            
            if (!$null -eq $MigrationID) {
              Write-Host "Queued migration of repository $RepoName with ID $MigrationID"
              $RepoMigrations[$RepoName] = $MigrationID
            }
          }

          if ($RepoMigrations.count -eq 0) {
            Write-Host "No migrations were started. Exiting..."
            exit 1
          }

          Write-Host "Queued $($RepoMigrations.count) migration(s). Waiting for them to complete..."

          foreach ($RepoName in $RepoMigrations.Keys) {
            $MigrationID = $RepoMigrations[$RepoName]
            Write-Host "Waiting for migration of repository $RepoName with ID $MigrationID to complete..."

            gei wait-for-migration --migration-id $MigrationID
          }

        env:
          GH_PAT: ${{ secrets.TARGET_ADMIN_TOKEN }}
          GH_SOURCE_PAT: ${{ secrets.SOURCE_ADMIN_TOKEN }}
          REPOSITORIES: ${{ matrix.repository }}
          VISIBILITY: ${{ fromJson(needs.prepare.outputs.parsed-issue).target_repository_visibility }}
        # continue-on-error: true

      - name: Generate user mapping file
        if: ${{ contains(github.event.comment.body, 'dry-run') }}
        run: |
          gei generate-mannequin-csv \
          --output user-mappings-template.csv \
          --github-target-org ${{ fromJson(needs.prepare.outputs.parsed-issue).target_organization }} \
          --github-target-pat ${{ secrets.TARGET_ADMIN_TOKEN }}
  
      - name: Upload user mapping file to artifacts
        if: ${{ contains(github.event.comment.body, 'dry-run') }}
        uses: actions/upload-artifact@v4
        with:
          name: user-mappings-template.csv
          path: ./user-mappings-template.csv
          if-no-files-found: error
          retention-days: 30

      # TODO: if you can, automatically map the mannequins to the correct users

      - name: Reclaim mannequins
        run: |
          gei reclaim-mannequin \
            --csv user-mappings-gei.csv \
            --github-target-org ${{ fromJson(needs.prepare.outputs.parsed-issue).target_organization }} \
            --github-target-pat ${{ secrets.TARGET_ADMIN_TOKEN }}

      - name: Set target repo visibility
        if: fromJson(needs.prepare.outputs.parsed-issue).target_repository_visibility == 'Mirror'
        uses: actions/github-script@v6
        with:
          script: |
            const organization = process.env.TARGET_ORGANIZATION;
            await require('./.github/scripts/set-target-repos-visibility.js')({organization});
        env:
          TARGET_ADMIN_TOKEN: ${{ secrets.TARGET_ADMIN_TOKEN }}
          TARGET_ORGANIZATION: ${{ fromJson(needs.prepare.outputs.parsed-issue).target_organization }}

      - name: Write repo migration status
        if: always()
        id: write-status
        run: |
          reponame=$(basename ${{ matrix.repository }})
          echo "repo-name=$reponame" >> "$GITHUB_OUTPUT" 
          echo "${{ matrix.repository }}, ${{ job.status }}" > ${reponame}.txt

      - name: Upload repo migration status
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: statuses
          path: ${{ steps.write-status.outputs.repo-name }}.txt
           
      - name: Save repo details to variables
        if: always()
        id: save-repo-details
        run: |
          reponame=$(basename ${{ matrix.repository }})
          repoorg=$(basename $(dirname ${{ matrix.repository }}))
          targetorg="${{ fromJson(needs.prepare.outputs.parsed-issue).target_organization }}"

          echo "REPO_NAME=$reponame" >> "$GITHUB_ENV"
          echo "REPO_ORG=$repoorg" >> "$GITHUB_ENV"
          echo "TARGET_ORG=$targetorg" >> "$GITHUB_ENV"

          echo "repo_name=$reponame" >> "$GITHUB_OUTPUT"
          echo "repo_org=$repoorg" >> "$GITHUB_OUTPUT"
          echo "target_org=$targetorg" >> "$GITHUB_OUTPUT"

          echo "Saved details: Repo_Name=$reponame, Repo_Org=$repoorg, Target_Org=$targetorg"
  
  report-failure:
    name: Report Failure
    runs-on: ubuntu-latest
    needs: [prepare, migrate]
    if: failure()
    steps:
      - uses: actions/download-artifact@v4
        id: download-artifact
        with:
          name: statuses
          path: statuses
      - name: Get failed repositories
        id: get-failed-repos
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let failedRepos = [];
            const dir = 'statuses';

            fs.readdirSync(`./${dir}`).forEach(file => {
              if (path.extname(file) === '.txt') {
                let [repo, status] = fs.readFileSync(`${dir}/${file}`, 'utf-8').split(',');
                console.log(`Repo: ${repo}, Status: ${status}`);
                if (status.trim() !== 'success') {
                  failedRepos.push(repo);
                }
              }
            });

            console.log(`Failed repos: \n${failedRepos.join('\n')}`);
            core.setOutput('failed-repos', failedRepos.join('\n'));

      - name: Report failed migration
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const repositories = `${{ steps.get-failed-repos.outputs.failed-repos }}`;
            let body = `:no_entry: **${{ needs.prepare.outputs.migration-type }} migration failed.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`

            if ('${{ steps.download-artifact.conclusion }}' === 'success') {
              body += `\n${repositories.trim().split('\n').length}/${process.env.REPOSITORIES.trim().split('\n').length} repo(s) failed: 
              \`\`\`
              ${{ steps.get-failed-repos.outputs.failed-repos }}
              \`\`\``

              const migrationType = '${{ needs.prepare.outputs.migration-type }}';
              const issueTitle = 'GHES%2FGHEC+repos+to+GitHub+migration+%5BGEI%5D';
              const issueRepositories = repositories.replace(/\n/g, '%0A');
              if (migrationType === 'Production' && repositories.trim().split('\n').length !== process.env.REPOSITORIES.trim().split('\n').length) {
                body += `\nSince this was a partially successful **${{ needs.prepare.outputs.migration-type }}** run, click [here](${context.payload.repository.html_url}/issues/new?template=github-repos-migration-gei.yml&title=${issueTitle}&repositories=${issueRepositories}&labels=gei,migration) to create a new issue with the failed repo(s).`
              }
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })
        env:
          REPOSITORIES: ${{ fromJson(needs.prepare.outputs.parsed-issue).repositories }}

  report-success:
    name: Report Success
    runs-on: ubuntu-latest
    needs: [prepare, migrate]
    if: success()
    steps:
      - name: Report successful migration
        uses: actions/github-script@v6
        with:
          script: |
            const body = `:tada: **${{ needs.prepare.outputs.migration-type }} migration succeeded.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Add delete repositories comment
        uses: actions/github-script@v6
        with:
          script: |
            const migrationType = '${{ needs.prepare.outputs.migration-type }}'

            if (migrationType === 'Dry-run') {
              let body = `In order to delete the migrated repositories of the dry-run, add a comment with the following slash command:

              \`\`\`
              /delete-repositories
              \`\`\`
              `

              // remove leading whitespace
              body = body.replace(/  +/g, '')

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              })
            }

  ADO2GHA-Migration:
    runs-on: ubuntu-latest
    needs: [prepare, migrate]

    steps:
      - name: Use Azure DevOps Inputs
        run: |
          echo "Azure DevOps Org: ${{ needs.prepare.outputs.AZURE_DEVOPS_ORG }}"
          echo "Azure DevOps Project: ${{ needs.prepare.outputs.AZURE_DEVOPS_PROJECT }}"
          echo "Azure DevOps Project: ${{ needs.prepare.outputs.ADO2GHA_DOWNLOAD_BRANCH }}"
      
      - name: Print Variables
        run: |
          echo "Repository Name: ${{ needs.migrate.outputs.repo_name }}"
          echo "Repository Org: ${{ needs.migrate.outputs.repo_org }}"
          echo "Target Org: ${{ needs.migrate.outputs.target_org }}"
      
      - name: Trigger Commit-history-mapping in Target
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.SOURCE_ADMIN_TOKEN }}
          event-type: ADO2GHA-migration
          client-payload: |
            {
              "repo_name": "${{ needs.migrate.outputs.repo_name }}",
              "repo_org": "${{ needs.migrate.outputs.repo_org }}",
              "target_org": "${{ needs.migrate.outputs.target_org }}",
              "AZURE_DEVOPS_ORG": "${{ needs.prepare.outputs.AZURE_DEVOPS_ORG }}",
              "AZURE_DEVOPS_PROJECT": "${{ needs.prepare.outputs.AZURE_DEVOPS_PROJECT }}",
              "ADO2GHA_DOWNLOAD_BRANCH": "${{ needs.prepare.outputs.ADO2GHA_DOWNLOAD_BRANCH }}",
              "PIPELINE_ACTION": "${{ needs.prepare.outputs.PIPELINE_ACTION }}",
              "BUILD_PIPELINE_ID": "${{ needs.prepare.outputs.BUILD_PIPELINE_ID }}",
              "RELEASE_PIPELINE_ID": "${{ needs.prepare.outputs.RELEASE_PIPELINE_ID }}"
            }

  Trigger-combined-data-items:
    runs-on: ubuntu-latest
    needs: [prepare, migrate]

    steps:
      - name: Print Variables
        run: |
          echo "Repository Name: ${{ needs.migrate.outputs.repo_name }}"
          echo "Repository Org: ${{ needs.migrate.outputs.repo_org }}"
          echo "Target Org: ${{ needs.migrate.outputs.target_org }}"

      - name: Trigger Combined Data-Items Migration
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.SOURCE_ADMIN_TOKEN }}
          event-type: combined-data-items
          client-payload: '{"repo_name": "${{ needs.migrate.outputs.repo_name }}", "repo_org": "${{ needs.migrate.outputs.repo_org }}", "target_org": "${{ needs.migrate.outputs.target_org }}"}'

    
  process-user-mapping:
    name: Process User Mapping
    runs-on: ubuntu-latest
    needs: [prepare, migrate, Trigger-combined-data-items]
    permissions:
      contents: read
      issues: write

    env:
      EMU_USERS_FILE: ./authors.xlsx
      USER_MAPPINGS_FILE: ./artifacts/user-mappings-template.csv
      ORG_NAME: ${{ needs.migrate.outputs.target_org }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download user mapping file artifact
        uses: actions/download-artifact@v4
        with:
          name: user-mappings-template.csv
          path: ./artifacts

      - name: Debug File System
        run: ls -R ./artifacts

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas python-dotenv openpyxl

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Install GitHub Enterprise Importer Extension
        run: |
          gh extension install github/gh-gei
        env:
          GH_TOKEN: ${{ github.token }}  
      
      - name: Debug Environment Variables
        run: |
          echo "GH_PAT is ${GH_PAT:+Set}"
          echo "ORG_NAME: $ORG_NAME"
        env:
          GH_PAT: ${{ secrets.TARGET_ADMIN_TOKEN }}
          
      - name: Run migration script
        run: python ./.github/scripts/mapping.py
        env:
          GH_PAT: ${{ secrets.TARGET_ADMIN_TOKEN }}
        
      - name: Post-execution status
        if: always()
        run: echo "Workflow execution completed."

  Commit-history-mapping:
    runs-on: ubuntu-latest
    name: Commit-history-mapping - ${{ needs.migrate.outputs.repo_name }}
    needs: [prepare, migrate, Trigger-combined-data-items, process-user-mapping]

    steps:
      - name: Print Variables
        run: |
          echo "Repository Name: ${{ needs.migrate.outputs.repo_name }}"
          echo "Repository Org: ${{ needs.migrate.outputs.repo_org }}"
          echo "Target Org: ${{ needs.migrate.outputs.target_org }}"
      
      - name: Trigger Commit-history-mapping in Target
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.SOURCE_ADMIN_TOKEN }}
          event-type: Commit-history-mapping
          client-payload: |
            {
              "repo_name": "${{ needs.migrate.outputs.repo_name }}",
              "repo_org": "${{ needs.migrate.outputs.repo_org }}",
              "target_org": "${{ needs.migrate.outputs.target_org }}"
            }
